----------------------------------------------------------------------------------------------------------------------------------------

★ step01 주제 정하기
★ step02 환경 구축
★ step03 RESTFULL API
★ step04 기획 / 디자인 등 작업
★ step05 product 배포

----------------------------------------------------------------------------------------------------------------------------------------

★ step 01 주제 정하기 

블로그 페이지

https://section.blog.naver.com/BlogHome.naver?directoryNo=0&currentPage=1&groupId=0

셀렉트 1. 년도
         2. 월
         - 오름차순
         - 내림차순
        3. 공감
         -오름차순
         -내림차순

카테고리
사진 또는 동영상 
대타이틀
디스크립션
닉네임
날짜 / 시간
공감

페이징

팝업 창 : 데이터 없음

----------------------------------------------------------------------------------------------------------------------------------------

★ step02 환경 구축

- git
----------------------------------------------------------------------------------------------------------------------------------------
셋팅

git init
git add README.md / 마크다운
git commit -m "first commit" 
git branch -M main / 브랜치 명 변경
git remote add origin https://github.com/rollydream/react_study_2022.git
git push -u origin main

git branch upstream // 설정 등록

명령어
ls 현재 기준 파일들
ls -al 자세히 보기

----------------------------------------------------------------------------------------------------------------------------------------
- node.js (babel / webpack) ( 비동기식으로 처리 / 백엔드에서 쓰임 / node.j의 Express를 사용하여 서버를 만들 수 있음 / 자바스크립트를 서버로서 이용할 때 씀 )

1. node 설치 후 git 설정  External: Windows Exec 찾은 후 경로 수정
C:\Program Files\Git\bin\bash.exe

2. Terminal › Integrated › Default Profile: Windows
The default profile used on Windows. This setting will currently be ignored if either terminal.integrated.shell.windows or terminal.integrated.shellArgs.windows are set.
git bash 로 수정 

----------------------------------------------------------------------------------------------------------------------------------------

- npm (Node Package Manager. Node.js의 패키지를 관리)

npx 설치
npm install npx -g

npm init // 개발 초기화

npm start // 서버 시작

react 설치
----------------------------------------------------------------------------------------------------------------------------------------

- yarn (npm에 비해 속도가 향상된 패키지 매니저 / npm과 호환 됨 /페이스 북에서 만들었음)
- react
- mongoDB / mySQL


환경 셋팅 참고 동영상
https://codingapple.com/unit/react1-install-create-react-app-npx/

babel / webpack 설치 가이드
https://yamoo9.gitbook.io/webpack/

----------------------------------------------------------------------------------------------------------------------------------------

react 환경 설정

1. 웹팩을 이용한 react 개발 개별 설정 
2. create-react-app을 통한 빠른 개발 통합 설정

----------------------------------------------------------------------------------------------------------------------------------------
★ step03 RESTFULL API

- RESTFULL API (백앤드 <-> 프론드앤드 서버 통신 규칙 정의)
----------------------------------------------------------------------------------------------------------------------------------------
restfull api 테스트
- Postman (get / post / put / delete) CRUD
----------------------------------------------------------------------------------------------------------------------------------------
데이터 연동

* (프론트앤드)
- mySQL (관계형 DB) : 테이블 
- mongoDB (document DB) : 관계형 DB 아님! /  필드와 값으로 구성된 데이터를 JSON 포맷으로 관리하는 DB { 필드 : 값 }
(mongoos: mongoDB와 node.js를 위한 라이브러리)

* (백엔드)
- express (node.js)
----------------------------------------------------------------------------------------------------------------------------------------
SEO 검색엔진
- next.js (구글만 런닝머신 ai로 없어도 seo 검색 가능)

SSR과 CSR의 정의와 차이점: HTML이 어디에서 조작되는지의 차이

참고 : https://velog.io/@ebiny/SSR-vs-CSR

CSR(Client Side Rendering) : 정적 웹사이트: HTML 파일(코드) 자체로 배포되는 사이트
SSR(Server Side Rendering) : 동적 웹사이트: 서버에 의해 HTML 파일이 동적으로 생성되는 사이트
SSG(NEXT.js) - SSR과 CSR의 하이브리드형

next.js 참고 강의 동영상 : 
https://nomadcoders.co/nextjs-fundamentals?utm_campaign=youtube_reactframeworks&utm_source=youtube&utm_id=20220213

----------------------------------------------------------------------------------------------------------------------------------------
- 서버 : aws 가상 서버
----------------------------------------------------------------------------------------------------------------------------------------
- 페이지 이동 시 router로 url 변경
----------------------------------------------------------------------------------------------------------------------------------------
* 세션과 쿠키의 차이점

세션(서버에 저장) : 방문자의 정보를 [서버]에 저장
쿠키(방문자 컴퓨터 메모리에 저장) :  방문자 정보를 [방문자 컴퓨터의 메모리]에 저장

localStorage :  사용자의 브라우저에 데이터를 저장
sessionStorage : 활성화 된 창 내에서만 데이터가 유지

----------------------------------------------------------------------------------------------------------------------------------------
히스토리 관리 툴 : notion 가입하기
----------------------------------------------------------------------------------------------------------------------------------------
★ step04 기획 / 디자인 등 작업
----------------------------------------------------------------------------------------------------------------------------------------
★ step05 product 배포 